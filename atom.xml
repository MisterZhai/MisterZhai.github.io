<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MisterZhai</title>
  <subtitle>MZ&#39;blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://misterzhai.win/"/>
  <updated>2016-11-09T13:34:32.000Z</updated>
  <id>http://misterzhai.win/</id>
  
  <author>
    <name>MisterZhai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac+Maven+IDEA搭建服务器开发环境</title>
    <link href="http://misterzhai.win/2016/11/09/idea-maven-web/"/>
    <id>http://misterzhai.win/2016/11/09/idea-maven-web/</id>
    <published>2016-11-09T13:27:45.000Z</published>
    <updated>2016-11-09T13:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="安装配置Maven插件"><a href="#安装配置Maven插件" class="headerlink" title="安装配置Maven插件"></a>安装配置Maven插件</h1><h2 id="检查JAVA-HOME环境变量以及Java命令"><a href="#检查JAVA-HOME环境变量以及Java命令" class="headerlink" title="检查JAVA_HOME环境变量以及Java命令"></a>检查JAVA_HOME环境变量以及Java命令</h2><pre><code>echo $JAVA_HOME

java -version

本地 ~/.bash_profile
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home
</code></pre><h2 id="下载安装Maven文件修改环境变量"><a href="#下载安装Maven文件修改环境变量" class="headerlink" title="下载安装Maven文件修改环境变量"></a>下载安装Maven文件修改环境变量</h2><p><a href="http://maven.apache.org/download.html" target="_blank" rel="external">http://maven.apache.org/download.html</a></p>
<p>把目录放置到//Users/ZMBP/Develop/  </p>
<p>修改Maven配置文件</p>
<p>config里面的settings.xml</p>
<p>新建一个文件夹，作为仓库</p>
<p>在上面配置文件中添加</p>
<pre><code>&lt;localRepository&gt;/Users/ZMBP/Develop/apache-maven-3.3.9/repository&lt;/localRepository&gt;
</code></pre><p>添加ali源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;mirror&gt;</div><div class="line">     &lt;id&gt;nexus-aliyun&lt;/id&gt;</div><div class="line">     &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">     &lt;name&gt;Nexus aliyun&lt;/name&gt;</div><div class="line">     &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</div><div class="line">   &lt;/mirror&gt;</div></pre></td></tr></table></figure>
<p>编辑本地环境 ~/.bash_profile</p>
<p>export M2_HOME=/Users/ZMBP/Develop/apache-maven-3.3.9<br>export M2=$M2_HOME/bin<br>export PATH=$M2:$PATH</p>
<p>重启配置服务</p>
<p>source .bash_profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置M2_HOME(IntelliJ默认为M2_HOME)环境变量指向apache-maven-3.2.3，并且把Maven安装目录下的bin/文件夹添加到系统环境变量PATH中去：</div><div class="line"></div><div class="line">vim打开/etc/profile文件 加入如下代码：    </div><div class="line"></div><div class="line">export M2_HOME=/Users/wanyakun/Documents/apache-maven-3.2.3</div><div class="line"></div><div class="line">export PATH=$PATH:$M2_HOME/bin</div><div class="line"></div><div class="line">运行以下命令检查Maven安装：</div><div class="line"></div><div class="line">	echo $M2_HOME</div><div class="line">	mvn –version</div></pre></td></tr></table></figure>
<p>在plugins里启动maven的两个插件(默认启动)，并配置Maven home directory(override,点…选择maven的目录)</p>
<p>如果上面更改了仓库的地址，这里也要设置Build,Execution,Deployment-&gt;Build Tools-&gt;Maven</p>
<h1 id="IDEA-maven"><a href="#IDEA-maven" class="headerlink" title="IDEA+maven"></a>IDEA+maven</h1><h2 id="新建一个Project"><a href="#新建一个Project" class="headerlink" title="新建一个Project"></a>新建一个Project</h2><ul>
<li>设置Maven的位置，在创建新的maven工程的时候也得改成自己的</li>
</ul>
<p><img src="2016-11-09-01.png" alt=""></p>
<ul>
<li>通过Maven建立Project，创建时选择使用模板</li>
</ul>
<p><img src="2016-11-09-02.png" alt=""></p>
<ul>
<li>配置项目名和组织名,GroupId组织名一般为域名(com.mz)，ArtifactId Maven管理的包名和后面的Project name项目名称一致即可</li>
</ul>
<p><img src="2016-11-09-03.png" alt=""></p>
<ul>
<li><p>点击next 填入project name 下面点开展开，可以看见有Module name的设置 如果有一个的话，也可以同名</p>
</li>
<li><p>添加相应的根目录和测试目录，使用Make Directory As设置src/main/java为Sources Root(源码)</p>
</li>
<li><p>（这一部分存在不用设置了）src/main/resources为ReSources Root(资源文件)，src/test/java为Test Sources Root(测试源码)，src/test/resources为Test ReSources Root(测试的资源文件)，webapp(web文件根目录)</p>
</li>
<li><p>创建项目的部分就算完成了,注意根目录下的pom.xml文件是maven的配置文件，在这里更新依赖和右键选择对应的功能</p>
</li>
</ul>
<p><img src="2016-11-09-04.png" alt=""></p>
<ul>
<li><p>使用maven的方式启动项目,修改web.xml，index.jsp为默认的欢迎页</p>
</li>
<li><p>在pom.xml配置服务器容器(如Jetty和Tomcat),在pom.xml-&gt;build-&gt;plugins下添加jetty和tomcat的 maven plugin，点击右上角的提示import,maven会自动下载jetty和tomcat的容器插件，打开右侧的Maven Projects，展开Plugins会看到jetty和tomcat，你也可以使用前一篇blog中普通java web配置Tomcat的方式来运行项目，</p>
</li>
<li><p><code>注意在Jfinal中 main不能启动容器，只有jetty才行 在web.xml中Config的路径不要配置错误</code>  <code>打包的时候直接可以build 选择 Artifacts就可以在target中找到对应的包了</code></p>
</li>
<li><p><code>第一次运行的时候有可能会失败，要下载一些东西，多试几次</code></p>
</li>
</ul>
<h1 id="搜索其他jar"><a href="#搜索其他jar" class="headerlink" title="搜索其他jar"></a>搜索其他jar</h1><p>如果我们要使用其他的jar，在<a href="http://search.maven.org/" target="_blank" rel="external">http://search.maven.org/</a>中央库里搜索相关的包，如：使用jfinal,搜索并选择相应的版本</p>
<h1 id="添加本地jar包依赖"><a href="#添加本地jar包依赖" class="headerlink" title="添加本地jar包依赖"></a>添加本地jar包依赖</h1><p>如果项目中使用了maven来管理依赖，但是同时需要添加本地的jar包（比如说有些jar包在maven的中央仓库中找不到）</p>
<p>这时不能直接在项目工程（Ctrl + Shift + Alt + S）的module中添加磁盘上的jar包，否则会报错</p>
<p>本地的jar包用maven install命令添加到maven的本地仓库里再在pom.xml文件中添加dependency即可。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>IDEA+maven快速上手JFinal（全步骤图文解析）<br><a href="https://my.oschina.net/mzdbxqh/blog/718748" target="_blank" rel="external">https://my.oschina.net/mzdbxqh/blog/718748</a></p>
<p>使用IntelliJ IDEA 配置Maven（入门）<br><a href="http://blog.csdn.net/qq_32588349/article/details/51461182" target="_blank" rel="external">http://blog.csdn.net/qq_32588349/article/details/51461182</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;安装配置Maven插件&quot;&gt;&lt;a href=&quot;#安装配置Maven插件&quot; class=&quot;headerlink&quot; title=&quot;安装配置Maven插件&quot;&gt;&lt;/a&gt;安装配
    
    </summary>
    
      <category term="Java" scheme="http://misterzhai.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://misterzhai.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA上JFinal开发环境搭建手册</title>
    <link href="http://misterzhai.win/2016/11/02/IntelliJIDEA-jfinal/"/>
    <id>http://misterzhai.win/2016/11/02/IntelliJIDEA-jfinal/</id>
    <published>2016-11-02T00:56:35.000Z</published>
    <updated>2016-11-02T08:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="luoxiaohei.png" alt=""></p>
<p>额 上一个图床软件貌似要升级，诶懒得升级，试了下把图片放在和文章同名的文件夹下，引用的时候，如果加上相对路径的文件夹名字，在本地可以预览，但是上传到Github就GG了，查看了public的文件夹，原来编译后，图片是和文章在同一级别的目录下，直接引用就可以显示出来了。</p>
<p>get✅</p>
<h1 id="新建一个空项目"><a href="#新建一个空项目" class="headerlink" title="新建一个空项目"></a>新建一个空项目</h1><p>新建一个项目，可以是空项目，也可以是连模块一起建的项目，本文为了演示Jetty和tomcat均能运行的效果，所以先建一个空项目，再分别建两个不同的module，以便区分。</p>
<p>如果项目和模块一起建，可以把Web Application选上，其他的默认就行。</p>
<p><img src="2016-11-02-00.png" alt=""></p>
<p>因为我们要分别测试jetty和tomcat的效果，要建两个模块，所以先建一个空项目</p>
<p><img src="2016-11-02-01.png" alt=""></p>
<h1 id="项目参数配置"><a href="#项目参数配置" class="headerlink" title="项目参数配置"></a>项目参数配置</h1><h2 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h2><p>如果新建一个空项目，会立即出来一个ProjectStructure的配置窗口。如果是连模块一起建的，请从【File】-【ProjectStructure】中选择，对项目参数进行配置。</p>
<p>选择Modules，准备新建Module</p>
<p><img src="2016-11-02-02.png" alt=""></p>
<p><img src="2016-11-02-03.png" alt=""></p>
<h2 id="新建Jetty运行模块"><a href="#新建Jetty运行模块" class="headerlink" title="新建Jetty运行模块"></a>新建Jetty运行模块</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p>我们先新建一个module，用于使用jetty来运行</p>
<p><img src="2016-11-02-04.png" alt=""></p>
<p>选上“Web Application”后，点击Next。</p>
<p>在出现的窗口中，直接在Module name中输入想要新建的module名字，下面的Content root和Module file location中会自动把路径填进去。</p>
<p>为了便于区分，我们把jetty运行的module命名为jf_jt。</p>
<p>点击“Finish”。</p>
<p><img src="2016-11-02-05.png" alt=""></p>
<p>此时会出现如下界面；</p>
<p>选择“Paths”选项卡，选中“Use module compile output path”后，在“Output path”和“Test output path”中均写上类输出的路径。按照一般常规写法，我把这个目录放在module下，web\WEB-INF路径下的classes目录下。</p>
<p><img src="2016-11-02-06.png" alt=""></p>
<p>点击“Apply”，把配置启用起来；</p>
<h3 id="导入类库"><a href="#导入类库" class="headerlink" title="导入类库"></a>导入类库</h3><p>然后点击左侧的Libraries选项卡；</p>
<p><img src="2016-11-02-07.png" alt=""></p>
<p><img src="2016-11-02-08.png" alt=""></p>
<p>在做这一步之前，我们先要把需要的类库分别拷贝到我们建立的类库目录中。</p>
<p>这个模块是需要jetty来运行的，所以需要JFinal的类库和jetty的类库，事先准备好这几个类库。</p>
<p>Jfinal-2.2-all目录下有需要的类库文件。</p>
<p>“jfinal-2.2-bin.jar”或“jfinal-2.2-bin-with-src.jar”是jfinal本身的jar包，任选一个都可以，为了方便调试，可以选择“jfinal-2.2-bin-with-src.jar”。 目前这个项目是为了Jetty而建的，所以要把“jetty-server-8.1.8.jar”也要包含进去。 在电脑中找到项目目录，进入到Module路径中，新建文件夹；</p>
<p>新建一个classes目录(上文新建module时设置的输出目录)和lib目录；</p>
<p>把“jfinal-2.0-bin.jar”和“jetty-server-8.1.8.jar”两个文件拷贝到刚才新建的lib目录下(注意，使用jfinal-2.0-bin.jar和使用jfinal-2.0-bin-src.jar，后续界面会略有不同，但差异不大)。</p>
<p>回到Intellij IDEA配置界面。</p>
<p>选择左侧的Libraries选项卡，点击中间的“+”号，新增Java类库。</p>
<p>在弹出的窗口中，找到lib目录并选中刚才拷进去的“jfinal-2.0-bin-with-src.jar”包。</p>
<p>点击“OK”。</p>
<p>此时会让你选择这些类库将用于哪些module（如果你在项目中有多个module,在此均会列出来）在这里，我们选择这些类库用于“jf_jt”module。</p>
<p>此时类库就会出现在列表里。</p>
<p><img src="2016-11-02-09.png" alt=""></p>
<p>点击“Apply”，保存配置。</p>
<p>再重复上述步骤，导入jetty的jar包。导入后如下图所示：</p>
<p>再选择左侧的“Artifacts”选项卡，此时会出现空白的Artifacts界面。(可以先关闭在打开就不会是 空白的页面了)</p>
<p><img src="2016-11-02-10.png" alt=""></p>
<p>或出现已经有一个“jf_ft.war exploded”的界面(如果关闭后重新打开Project Structure界面就会出现)。建议：<strong>最好在导入类库后，点击“OK”，关闭本界面后，重新通过【File】-【Project Structure】菜单打开本界面后，选“Artifacts”选项卡进行操作，避免重复建立jf-ft.war exploded。</strong></p>
<p>重新打开界面，并选择Artifacts选项卡后，界面会如下图所示：</p>
<p><img src="2016-11-02-11.png" alt=""></p>
<p>此时窗口下部会出现一条告警信息。如上图红框部分。</p>
<p>此时点击“Fix…”按键，选择“Add‘jfinal-2.0-bin-with-src’to the artifact”，即可。</p>
<p><img src="2016-11-02-12.png" alt=""></p>
<p>设置好的界面如下图所示（把Build on make选上）；</p>
<p>点击“Apply”按钮保存设置；</p>
<p><img src="2016-11-02-13.png" alt=""></p>
<p>再点击“+”号，添加一个“Web Application：Archive”，此时选“For ‘jfjt:war exploded’”；</p>
<p><img src="2016-11-02-14.png" alt=""></p>
<p><img src="2016-11-02-15.png" alt=""></p>
<p>建好后，界面如下图所示(如果还有告警提示，按照上面步骤，点击“Fix”按键把类库添加进Artifact中);</p>
<p>选中“Build on make”选项后，点“OK”按键保存并退出配置界面。</p>
<p>至此Jetty运行的模块已经建好。</p>
<h2 id="新建Tomcat运行模块"><a href="#新建Tomcat运行模块" class="headerlink" title="新建Tomcat运行模块"></a>新建Tomcat运行模块</h2><h3 id="新建模块-1"><a href="#新建模块-1" class="headerlink" title="新建模块"></a>新建模块</h3><p>点击【File】-【New】-【Module】：</p>
<p><img src="2016-11-02-16.png" alt=""></p>
<p>选上“Web Application”，并点“Next”：</p>
<p>填上Module的名称，这里起名为jf-tc,然后点击“Finish”：</p>
<p><img src="2016-11-02-17.png" alt=""></p>
<h3 id="导入类库-1"><a href="#导入类库-1" class="headerlink" title="导入类库"></a>导入类库</h3><p>现在可以直接在IDEA的界面建目录classes和lib。</p>
<p>鼠标右键点击[jf-tc]-[web]-[WEB-INF]目录，在出来的菜单里点击【New】-【Directory】。</p>
<p>输入classes和lib目录的名称：</p>
<p>建好目录后的模块如下所示:</p>
<p>点击【File】-【Project Structure】进入项目，步骤和上一个模块建立的时候一样，此时界面里已经有两个模块，选中jf-tc模块后，设置Path：</p>
<p>接下来再设置Libraries，在此之前，需要把jfinal-2.0-bin-with-src.jar拷贝到lib目录下。</p>
<p>在“Libraries”选项卡中点“+”号，选“Java”：</p>
<p>这里只需要导入一个jar包即可(记住，目录不要选错，要选刚才拷进去的jf-tc模块下lib目录的jfinal-2.0-bin-with-src.jar文件)。</p>
<p><img src="2016-11-02-18.png" alt=""></p>
<p>注意：选中目标Jar包后，选模块的时候，一定不要选错。</p>
<p>点“OK”后，来到Artifacts选项卡：</p>
<p><img src="2016-11-02-19.png" alt=""></p>
<p>添加一个Artifact</p>
<p><img src="2016-11-02-20.png" alt=""></p>
<p>记住不要选错模块。</p>
<p>添加成功后，记住Fix掉警告信息(新加的两个Artifact都要fix)。然后都选上“Build on make”选项。</p>
<p>至此，两个模块都建好，可以开始真正的编写代码之旅了。</p>
<h1 id="修改运行配置"><a href="#修改运行配置" class="headerlink" title="修改运行配置"></a>修改运行配置</h1><h2 id="创建Jetty运行配置"><a href="#创建Jetty运行配置" class="headerlink" title="创建Jetty运行配置"></a>创建Jetty运行配置</h2><p>点击【run】-【Edit Configurations】菜单：</p>
<p><img src="2016-11-02-21.png" alt=""></p>
<p>出现下面的界面，并点击左上角的“+”号，选“Application”选项：</p>
<p><img src="2016-11-02-22.png" alt=""></p>
<p>设置一个名称，在这里命名为“jf-jt-jetty”。</p>
<p>设置Main Class(在出来的“Choose Main Class”窗口里直接输入com.jfinal……,下面会直接把class列出来，不用搜索和查找).</p>
<p><img src="2016-11-02-23.png" alt=""></p>
<p>设好Main Class以后，设置“working directory”和“Use classpath of module”两项，如下图所示：</p>
<p>点击“OK”，设置完成。</p>
<h2 id="创建Tomcat运行配置"><a href="#创建Tomcat运行配置" class="headerlink" title="创建Tomcat运行配置"></a>创建Tomcat运行配置</h2><p>点击【run】-【Edit Configurations】菜单：</p>
<p><img src="2016-11-02-24.png" alt=""></p>
<p>选择【Tomcat Server】-【local】菜单：</p>
<p><img src="2016-11-02-25.png" alt=""></p>
<p>配置Tomcat参数，起一个名字，然后点击最右边的“+”号，增加一个Artifact：</p>
<p><img src="2016-11-02-26.png" alt=""></p>
<p><img src="2016-11-02-27.png" alt=""></p>
<p>在出来的窗口中，选“jf-tc:war exploded”即exploded的那个war。</p>
<p><img src="2016-11-02-28.png" alt=""></p>
<p><img src="2016-11-02-29.png" alt=""></p>
<p>点击“OK”后，就配置完成了。</p>
<p>注意，这个Application context里填写的路径，是你调试或运行时出现的url的后缀，比如，如果你在此设置“/”，则最后是通过“<a href="http://localhost:8080/”运行和调试；假如你在此设置为“/test”，则最后是通过“http://localhost:8080/test”进行访问和调试。" target="_blank" rel="external">http://localhost:8080/”运行和调试；假如你在此设置为“/test”，则最后是通过“http://localhost:8080/test”进行访问和调试。</a></p>
<h1 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h1><p>现在可以添加源文件了。我们可以分别在两个项目下建立源文件(建源文件的过程不管上面jetty和tomcat项目都是一样的，我们以tomcat项目来举例):</p>
<p>我们在src路径下，添加一个package名称为com.demo.</p>
<p><img src="2016-11-02-30.png" alt=""></p>
<p>再在这个package下建三个类：</p>
<p><img src="2016-11-02-31.png" alt=""></p>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void index() &#123;</div><div class="line"></div><div class="line">        renderText(&quot;欢迎来到JFinal的世界&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void index() &#123;</div><div class="line">        renderText(&quot;这是一个Tomcat下的index页面&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>另外再建两个类HelloController.java和Indexcontroller.java,内容分别如下：</p>
<p>编辑模块下，web\WEB-INF路径下的web.xml文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</div><div class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</div><div class="line">         version=&quot;3.1&quot;&gt;</div><div class="line"></div><div class="line">    &lt;filter&gt;</div><div class="line">        &lt;filter-name&gt;jfinal&lt;/filter-name&gt;</div><div class="line">        &lt;filter-class&gt;com.jfinal.core.JFinalFilter&lt;/filter-class&gt;</div><div class="line">            &lt;init-param&gt;</div><div class="line">                &lt;param-name&gt;configClass&lt;/param-name&gt;</div><div class="line">                 &lt;param-value&gt;com.demo.DemoConfig&lt;/param-value&gt;</div><div class="line">            &lt;/init-param&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">    &lt;filter-mapping&gt;</div><div class="line">        &lt;filter-name&gt;jfinal&lt;/filter-name&gt;</div><div class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/filter-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>至此，tomcat部分已经完成，按同样的方式配置jetty部分(也可以直接把package和web.xml文件直接拷贝过去)。</p>
<h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><h2 id="在Jetty下运行"><a href="#在Jetty下运行" class="headerlink" title="在Jetty下运行"></a>在Jetty下运行</h2><p>点击【Run】-【Run】菜单：</p>
<p>页面中间会出现让你选择运行哪个模块的选项，我们选择jetty的模块。</p>
<p>此时IDEA界面下半部会显示jetty的启动信息，如下：</p>
<p>说明jetty已经正常启动了。</p>
<p>此时需要手动打开浏览器页面，输入“<a href="http://localhost”，就会出现Index控制器对应的页面。(注意，如果你的电脑上装了别的Web服务器，注意端口冲突)。" target="_blank" rel="external">http://localhost”，就会出现Index控制器对应的页面。(注意，如果你的电脑上装了别的Web服务器，注意端口冲突)。</a></p>
<p>IDEA下部窗口会出现相应的调试信息。</p>
<p>输入<a href="http://localhost/hello,会出现hello控制器对应的页面。" target="_blank" rel="external">http://localhost/hello,会出现hello控制器对应的页面。</a></p>
<h2 id="在Tomcat下运行"><a href="#在Tomcat下运行" class="headerlink" title="在Tomcat下运行"></a>在Tomcat下运行</h2><p>同样点击【Run】-【Run】菜单，在页面中心的弹出菜单选“jf-tc-tomcat”。</p>
<p>IDEA界面下半部分会显示启动tomcat过程中的日志，等待tomcat启动后，会自动调用本地浏览器窗口，把index页面内容显示出来。</p>
<p>输入<a href="http://loaclhost:8080/hello" target="_blank" rel="external">http://loaclhost:8080/hello</a></p>
<p>出来hello控制器中的内容</p>
<h1 id="项目实际部署"><a href="#项目实际部署" class="headerlink" title="项目实际部署"></a>项目实际部署</h1><p>Intellij IDEA打包的war文件位于项目根目录的out目录下。</p>
<p>把此文件拷贝到tomcat的webapps目录下(可以改名，例如改名为test.war),无需做任何修改，启动tomcat后，直接访问：<a href="http://ip:8080/test/即可正常访问页面。" target="_blank" rel="external">http://ip:8080/test/即可正常访问页面。</a></p>
<p>要更改输出目录，请在【File】-【Project Structure】-【Project】标签页修改即可。</p>
<p>pic</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>自带的jetty不管怎么设置就是启动不起来无语！</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;img src=&quot;luoxiaohei.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;额 上一个图床软件貌似要升级，诶懒得升级，试了下把图片放在和文章同名的文件夹下，引用的时候，
    
    </summary>
    
      <category term="Java" scheme="http://misterzhai.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://misterzhai.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建以及Github的部署</title>
    <link href="http://misterzhai.win/2016/10/16/hexoBlog/"/>
    <id>http://misterzhai.win/2016/10/16/hexoBlog/</id>
    <published>2016-10-16T12:58:12.000Z</published>
    <updated>2016-11-06T15:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>相对来说，hexo的安装更简单…</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><pre><code>&lt;https://nodejs.org/en/&gt;安装，V6.8.0Current
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Node.js was installed at</div><div class="line"></div><div class="line">   /usr/local/bin/node</div><div class="line"></div><div class="line">npm was installed at</div><div class="line"></div><div class="line">   /usr/local/bin/npm</div><div class="line"></div><div class="line">Make sure that /usr/local/bin is in your $PATH.</div></pre></td></tr></table></figure>
<h2 id="开始安装hexo"><a href="#开始安装hexo" class="headerlink" title="开始安装hexo"></a>开始安装hexo</h2><p>参考文档<a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a></p>
<pre><code>sudo npm install -g hexo-cli
</code></pre><p>提示为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/hexo -&gt; /usr/local/lib/node_modules/hexo-cli/bin/hexo</div><div class="line">/usr/local/lib</div><div class="line">└── hexo-cli@1.0.2</div></pre></td></tr></table></figure>
<p>进入到你要安装的路径下面</p>
<pre><code>hexo init folder // floder为要安装的文件夹
</code></pre><p>安装依赖包</p>
<pre><code>cd folder
npm install
</code></pre><p>等到出来好多文件夹才算成功</p>
<p>Start blogging with Hexo!</p>
<h2 id="开启hexo服务器"><a href="#开启hexo服务器" class="headerlink" title="开启hexo服务器"></a>开启hexo服务器</h2><pre><code>hexo s

提示
INFO  Start processing
INFO  Hexo is running at http://localhost:4000/.     Press Ctrl+C to stop.
</code></pre><h2 id="哇-页面出来了，撒花-🎆🎆"><a href="#哇-页面出来了，撒花-🎆🎆" class="headerlink" title="哇~页面出来了，撒花~🎆🎆"></a>哇~页面出来了，撒花~🎆🎆</h2><p>这只是在本地运行，接下来部署到Github服务器</p>
<h1 id="部署到Github服务器上"><a href="#部署到Github服务器上" class="headerlink" title="部署到Github服务器上"></a>部署到Github服务器上</h1><h2 id="配置key"><a href="#配置key" class="headerlink" title="配置key"></a>配置key</h2><p>因为之前安装过jekyll,仓库已经创建好了name.github.io</p>
<p>执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，将SSH key添加到Github中</p>
<pre><code>ls -al ~/.ssh
</code></pre><p>如果没有，则生成新的ssh key</p>
<pre><code>ssh-keygen -t rsa -C&quot;your_email@example.com&quot;
</code></pre><p>按三个回车忽略要提示输入的，会出现会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件</p>
<p>反正这也没人回来，秘钥也放这个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The key fingerprint is:</div><div class="line">SHA256:pwJPp2Mni3BXT1smpcCifRJwPwKhNEZ5jY3tDT6vomM guanjunzhai@163.com</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">| .=.+B.          |</div><div class="line">| o.o++=o         |</div><div class="line">|  .. o+o=   .    |</div><div class="line">|     o++.o o     |</div><div class="line">|    o +oS = o    |</div><div class="line">|     + *.= =     |</div><div class="line">|  . . O.o o      |</div><div class="line">|  Eo.+.*         |</div><div class="line">| ..o...          |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<h2 id="将ssh-key添加到Github中"><a href="#将ssh-key添加到Github中" class="headerlink" title="将ssh key添加到Github中"></a>将ssh key添加到Github中</h2><p>~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p>
<p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。</p>
<p>刚开始一直报错</p>
<pre><code>Key is invalid. Ensure you&apos;ve copied the file correctly
</code></pre><p>linux下使用vim打开再复制就会因为vim添加了回车而导致key添加失败,使用cat命令将.ssh/id_rsa.pub内容输出到终端，再拷贝.</p>
<p>仓库地址 MisterZhai/MisterZhai.github.io </p>
<p>目录结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .deploy #需要部署的文件</div><div class="line">├── node_modules #Hexo插件</div><div class="line">├── public #生成的静态网页文件</div><div class="line">├── scaffolds #模板</div><div class="line">├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</div><div class="line">| ├── _drafts #草稿</div><div class="line">| └── _posts #文章</div><div class="line">├── themes #主题</div><div class="line">├── _config.yml #全局配置文件</div><div class="line">└── package.json</div></pre></td></tr></table></figure>
<h2 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置 _config.yml"></a>全局配置 _config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># Hexo Configuration</div><div class="line"># Docs: Configuration</div><div class="line"># Source: GitHub - hexojs/hexo: A fast, simple &amp; powerful blog framework, powered by Node.js.</div><div class="line"># Site #站点信息</div><div class="line">title:  #标题</div><div class="line">subtitle:  #副标题</div><div class="line">description:  #站点描述，给搜索引擎看的</div><div class="line">author:  #作者</div><div class="line">email:  #电子邮箱</div><div class="line">language: zh-CN #语言</div><div class="line"># URL #链接格式</div><div class="line">url:  #网址</div><div class="line">root: / #根目录</div><div class="line">permalink: :year/:month/:day/:title/ #文章的链接格式</div><div class="line">tag_dir: tags #标签目录</div><div class="line">archive_dir: archives #存档目录</div><div class="line">category_dir: categories #分类目录</div><div class="line">code_dir: downloads/code</div><div class="line">permalink_defaults:</div><div class="line"># Directory #目录</div><div class="line">source_dir: source #源文件目录</div><div class="line">public_dir: public #生成的网页文件目录</div><div class="line"># Writing #写作</div><div class="line">new_post_name: :title.md #新文章标题</div><div class="line">default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</div><div class="line">titlecase: false #标题转换成大写</div><div class="line">external_link: true #在新选项卡中打开连接</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">highlight: #语法高亮</div><div class="line">  enable: true #是否启用</div><div class="line">  line_number: true #显示行号</div><div class="line">  tab_replace:</div><div class="line"># Category &amp; Tag #分类和标签</div><div class="line">default_category: uncategorized #默认分类</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"># Archives</div><div class="line">2: 开启分页</div><div class="line">1: 禁用分页</div><div class="line">0: 全部禁用</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"># Server #本地服务器</div><div class="line">port: 4000 #端口号</div><div class="line">server_ip: localhost #IP 地址</div><div class="line">logger: false</div><div class="line">logger_format: dev</div><div class="line"># Date / Time format #日期时间格式</div><div class="line">date_format: YYYY-MM-DD #参考Moment.js | Docs</div><div class="line">time_format: H:mm:ss</div><div class="line"># Pagination #分页</div><div class="line">per_page: 10 #每页文章数，设置成 0 禁用分页</div><div class="line">pagination_dir: page</div><div class="line"># Disqus #Disqus评论，替换为多说</div><div class="line">disqus_shortname:</div><div class="line"># Extensions #拓展插件</div><div class="line">theme: landscape-plus #主题</div><div class="line">exclude_generator:</div><div class="line">plugins: #插件，例如生成 RSS 和站点地图的</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"># Deployment #部署，将 lmintlcx 改成用户名</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 刚刚github创库地址.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p><code>注意</code></p>
<p>配置文件的冒号“:”后面有一个空格(包括theme中的)否则执行hexo命令会报错</p>
<p>repo: 刚刚github创库地址.git</p>
<h2 id="hexo命令行使用"><a href="#hexo命令行使用" class="headerlink" title="hexo命令行使用"></a>hexo命令行使用</h2><p>常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">hexo help #查看帮助</div><div class="line">hexo init #初始化一个目录</div><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成网页，可以在 public 目录查看整个网站的文件</div><div class="line">hexo server #本地预览，&apos;Ctrl+C&apos;关闭</div><div class="line">hexo deploy #部署.deploy目录</div><div class="line">hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件</div></pre></td></tr></table></figure>
<p>简写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>新建文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;标题&quot;</div><div class="line">在 _posts 目录下会生成文件标题.md</div><div class="line"></div><div class="line">title: Hello World</div><div class="line">date: 2015-07-30 07:56:29 #发表日期，一般不改动</div><div class="line">categories: []hexo] #文章文类</div><div class="line">tags: [hexo,github] #文章标签，多于一项时用这种格式</div></pre></td></tr></table></figure>
<p>编辑文章</p>
<p>正文，使用Markdown语法书写</p>
<p>编辑完后保存，hexo server 打开浏览器预览</p>
<p><code>在blog文件夹目录下</code>执行生成静态页面命令：</p>
<pre><code>hexo generate        或者：hexo g
</code></pre><p>此时若出现如下报错：</p>
<p>ERROR Local hexo not found in ~/blog</p>
<p>ERROR Try runing: ‘npm install hexo –save’</p>
<p>则执行命令：</p>
<pre><code>npm install hexo --save
</code></pre><p>若无报错，自行忽略此步骤。</p>
<p>再执行配置命令：</p>
<pre><code>hexo deploy            或者：hexo d
</code></pre><p>若执行命令hexo deploy仍然报错：无法连接git，则执行如下命令来安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">https://github.com/hexojs/hexo-deployer-git</a></p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>再次执行hexo generate和hexo deploy命令</p>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>终端cd到blog文件夹下，执行如下命令新建文章：</p>
<pre><code>hexo new &quot;postName&quot;
</code></pre><p>名为postName.md的文件会建在目录/blog/source/_posts下</p>
<p>文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布：</p>
<p>hexo generate//生成静态页面</p>
<p>hexo deploy            //将文章部署到Github</p>
<h1 id="安装theme"><a href="#安装theme" class="headerlink" title="安装theme"></a>安装theme</h1><p>将blog目录下_config.yml里theme的名称landscape修改为next（主题的名字）</p>
<p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p>
<pre><code>hexo clean      //清除缓存文件 (db.json) 和已生成的静态文件 (public)

hexo g            //生成缓存和静态文件

hexo d            //重新部署到服务器
</code></pre><p>更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。</p>
<h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p>Anisina 中文使用教程<a href="http://haojen.github.io/2016/08/06/Anisina-中文使用教程/" target="_blank" rel="external">http://haojen.github.io/2016/08/06/Anisina-中文使用教程/</a></p>
<p>主题地址<a href="https://github.com/Haojen/hexo-theme-Anisina" target="_blank" rel="external">https://github.com/Haojen/hexo-theme-Anisina</a></p>
<p>最开始想用这个，但是文档不是太全，后来换成next了，next的readme上面<code>精于心 简于形</code>简直了，就它了，而且文档齐全。</p>
<p>更换主题 next</p>
<p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html</a><br><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/writing.html</a></p>
<h1 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h1><h2 id="Github端"><a href="#Github端" class="headerlink" title="Github端"></a>Github端</h2><p>在/blog/themes/landscape/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：gonghonglou.com写入。</p>
<p>终端cd到blog目录下执行如下命令重新部署：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre><p>一定要在使用的主题的资源文件里写，不然上传的时候，还是会没有！</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析 –&gt; 添加解析</p>
<p>记录类型：CNAME</p>
<p>主机记录：将域名解析为example.com（不带www），填写@或者不填写  再添加一条www 后面一样这样带www也能访问了</p>
<p>记录值：xxxxxxx.github.io.    (不要忘记最后的.，xxxxxxx改为你自己的用户名)，点击保存即可。</p>
<h1 id="第三方服务和定制"><a href="#第三方服务和定制" class="headerlink" title="第三方服务和定制"></a>第三方服务和定制</h1><h2 id="使用七牛云存储"><a href="#使用七牛云存储" class="headerlink" title="使用七牛云存储"></a>使用七牛云存储</h2><p>使用ipic上传图片到图床<a href="https://github.com/toolinbox/iPic" target="_blank" rel="external">https://github.com/toolinbox/iPic</a></p>
<p>在 iPic 中添加七牛云<a href="http://i.toolinbox.net/iPic/iPicIntroduce2.html" target="_blank" rel="external">http://i.toolinbox.net/iPic/iPicIntroduce2.html</a></p>
<p>在 iPic 中添加七牛图床</p>
<p>打开 偏好设置，进入 图床 页，选择添加 七牛。以下分别介绍各项的意义及如何配置：</p>
<p>资源</p>
<p>就是刚才创建的 资源(七牛的空间名字)</p>
<p>资源</p>
<p>就是刚才创建的 资源</p>
<p>AccessKey 与 SecretKey</p>
<p>可以简单理解为七牛的隐身账户和密码</p>
<p>进入 个人面板 &gt; 密钥管理页</p>
<p>依次将 AK、SK 中的内容复制到 iPic 对应的 AccessKey、SecretKey 中</p>
<p>高级设置</p>
<p>点击 网址前缀 右侧的高级设置图标，即可弹出如下设置界面：</p>
<p>网址前缀</p>
<p>和前文介绍的一致</p>
<p>文件名前缀</p>
<p>可简单理解为图床中的目录</p>
<p>例如，如果希望 iPic 上传的图片都位于 blog 目录中，只要在这里输入 blog，所有上传的图片则均位于 blog 目录中，生成的图片链接类似于：<a href="http://o7entp.bkt.clouddn.com/blog/pic.jpg" target="_blank" rel="external">http://o7entp.bkt.clouddn.com/blog/pic.jpg</a><br>自定义文件名</p>
<p>支持以下三种文件名</p>
<p>纯文件名 也即和上传时文件名相同，比如 pic.jpg</p>
<p>日期-文件名 也即和之前的 iPic 相同，比如 2016-06-16-pic.jpg</p>
<p>随机 比如 jk8l1.jpg，可以大大缩短链接长度</p>
<p>网址后缀</p>
<p>可用于自定义图片样式。比如，在七牛中添加了名字为 s 的样式表示缩略图，样式分隔符为 -，则可以在 网址后缀 中输入 -s。这样之后每次上传图片生成的链接最后都会附上 -s，也即表示缩略图。</p>
<p>使用七牛</p>
<p>先上传至七牛、再粘贴至 Markdown 编辑器中</p>
<h2 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h2><p>直接将网易云音乐，歌曲或者歌单分享城外链是播放不出来的，不要问为什么，这是个忧桑的故事。</p>
<p>将外链插入到hexo/themes/next/layout中的文件中，把播放器放在sidebar里面，选择了_macro文件夹中的 sidebar.swig文件，把外链放在</p>
<pre><code>``{%if theme.link %} {% end for %} ``
</code></pre><p>这个代码块下面，如果选择放到主页的话，就放到_layout.swig文件中去就行了。</p>
<p><a href="http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/</a></p>
<p>像我这个爱听歌的人，不弄个音乐放首页简直不能忍哈哈哈哈，下面开启正确的添加音乐姿势</p>
<p>1。先安装插件 <a href="https://github.com/grzhan/hexo-tag-aplayer#installation" target="_blank" rel="external">https://github.com/grzhan/hexo-tag-aplayer#installation</a> 也可以播放本地</p>
<p>2.找音乐id <a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="external">https://github.com/YUX-IO/163music-APlayer-you-get-docker</a></p>
<p>在这里或者网易云音乐里去找生成的外链ID<a href="https://music.daoapp.io" target="_blank" rel="external">https://music.daoapp.io</a></p>
<p>3.应用<a href="https://www.tiexo.cn/http-https-music/" target="_blank" rel="external">https://www.tiexo.cn/http-https-music/</a></p>
<p>因为MarkDown是支持HTML格式的，所以插入音乐的外链可以直接放到文章中</p>
<p>github搭建hexo的同学们，现在gh-pages已经强制要求全站https啦，怪不得不能直接播放。</p>
<p>由于网易云目前并不支持https，所以我们只能通过插件来实现音乐播放</p>
<pre><code>npm install --save hexo-tag-aplayer
</code></pre><p>然后就是第2步的项目有一个demos</p>
<pre><code>https://music.daoapp.io/iframe?song=287749&amp;qnarrow=1&amp;qssl=1
</code></pre><p>搜到喜欢的歌曲，查看链接找到ID </p>
<p>替换网易的外链就可以了</p>
<pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;https://music.daoapp.io/iframe?song=287749&amp;qssl=1&amp;qlrc=0&amp;qnarrow=0&amp;autoplay=1&quot;&gt;&lt;/iframe&gt;
</code></pre><ul>
<li><p>width和height是播放器的宽度和高度</p>
</li>
<li><p>287749这串数字是网易云音乐的歌曲编号</p>
</li>
<li>qlrc=0代表不显示歌词</li>
<li>autoplay=1代表自动播放</li>
</ul>
<p>每次只需在网易云找好歌曲编号，然后替换这串数字即可<br>粘贴到.md文件里面</p>
<p>好了看的也累了送歌一首&lt;东京不太热&gt;哈哈哈哈哈</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="120" src="https://music.daoapp.io/iframe?song=34723470&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe>

<h2 id="头像修改"><a href="#头像修改" class="headerlink" title="头像修改"></a>头像修改</h2><p>1.打开next主题目录：next/source/css/_common/components/sidebar/sidebar-author.styl</p>
<p>2.添加代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.site-author-image:hover &#123; </div><div class="line">  background-color: #55DAE1 ;</div><div class="line">  -webkit-transform: rotate(360deg) scale(1.1);</div><div class="line">  -moz-transform: rotate(360deg) scale(1.1);</div><div class="line">  -ms-transform: rotate(360deg) scale(1.1);</div><div class="line">  transform: rotate(360deg) scale(1.1);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>3.在.site-author-image {}中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">border-radius: 50%</div><div class="line">-webkit-transition: 1.4s all;</div><div class="line">-moz-transition: 1.4s all;</div><div class="line">-ms-transition: 1.4s all;</div><div class="line">transition: 1.4s all;</div></pre></td></tr></table></figure>
<p>看了<a href="http://xujiaji.github.io/" target="_blank" rel="external">http://xujiaji.github.io/</a></p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>hexo-generator-feed 用于生成RSS订阅</p>
<pre><code>npm install hexo-generator-feed --save
</code></pre><p>hexo-generator-sitemap 用于生成搜索引擎网站地图</p>
<pre><code>npm install hexo-generator-sitemap --save
</code></pre><p>然后在博客配置文件_config.yml中添加启动（我的报错不知道为啥QAQ,注释了又）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure>
<p>对于百度地图，还需要添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#sitemap</div><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xm</div></pre></td></tr></table></figure>
<p>RSS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div><div class="line">  </div><div class="line">  </div><div class="line">type - Feed type. (atom/rss2)</div><div class="line">path - Feed path. (Default: atom.xml/rss2.xml)</div><div class="line">limit - Maximum number of posts in the feed (Use 0 or false to show all posts)</div><div class="line">hub - URL of the PubSubHubbub hubs (Leave it empty if you don&apos;t use it)</div></pre></td></tr></table></figure>
<p>测试一下RSS和百度地图是否生效，百度地图是访问misterzhai.win/sitemap.xml可以查看，如果能正常访问说明可用  RSS是misterzhai.win/atom.xml</p>
<p>以后可以按照文档添加Google的</p>
<p>Google Webmaster tools</p>
<p>将网站提交给百度</p>
<p><a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">http://zhanzhang.baidu.com/</a></p>
<p>自己实现网站的图标ico，以及书签和收藏图标<br>怎样给自己的网站添加一个在浏览器标签、地址栏左边和收藏夹上显示的缩略logo标志<a href="http://blog.csdn.net/hsd2012/article/details/51782545" target="_blank" rel="external">http://blog.csdn.net/hsd2012/article/details/51782545</a></p>
<p> Hexo博客网站再配置<a href="http://blog.csdn.net/bigpudding24/article/details/48196939" target="_blank" rel="external">http://blog.csdn.net/bigpudding24/article/details/48196939</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&quot;http://baijii-common.b0.upaiyun.com/icons/favicon.ico&quot; rel=&quot;icon&quot;&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/57-b426758a1fcfb30486f20fd073c3b8ec.png&quot; sizes=&quot;57x57&quot; /&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/72-feca4b183b9d29fd188665785dc7a7f1.png&quot; sizes=&quot;72x72&quot; /&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/76-ba757f1ad3421192ce7192170393d2b0.png&quot; sizes=&quot;76x76&quot; /&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/114-8dae53b3bcea3f06bb139e329d1edab3.png&quot; sizes=&quot;114x114&quot; /&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/120-fa315ee0177dba4c55d4f66d4129b47f.png&quot; sizes=&quot;120x120&quot; /&gt;</div><div class="line">      &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://cdn-qn0.jianshu.io/assets/apple-touch-icons/152-052f5799bec8fb3aa624bdc72ef5bd1d.png&quot; sizes=&quot;152x152&quot; /&gt;</div><div class="line"></div><div class="line">简书的是这样的，最上面是ico，下面应该是收藏图标</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">别人的可以显示出来收藏图标 256*256</div><div class="line"></div><div class="line"></div><div class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://icons.iconarchive.com/icons/blackvariant/button-ui-requests-15/256/Amazon-Kindle-icon.png&quot;&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我的只能显示书签图标</div><div class="line"></div><div class="line"> &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico?v=5.0.2&quot; /&gt;</div></pre></td></tr></table></figure>
<p><code>缺个美工啊啊啊啊啊啊啊啊</code></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li><p>new 文章的时候，title注意不要用汉语，不然生成的链接有好多%，不利于引用。</p>
</li>
<li><p>标题 要注意 和 # 号直接有空格才能正确分类</p>
</li>
<li><p>发布的时候，里面有一段js代码会引发编译错误❎</p>
</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li><p>昨天晚上回宿舍后，用手机打开网站后，发现居然在浏览器的下面有广告，当时就哔了狗了。第一反应开始想哪个插件，带的广告，都是开源的，不太可能有广告啊，上网查了以后，怀疑是铁通的移动服务商给提供的，或者被劫持了…再有广告，工信部见。</p>
</li>
<li><p>感谢开源组织</p>
</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>手把手教你建github技术博客by hexo<a href="https://zhuanlan.zhihu.com/p/22183337" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/22183337</a></p>
<p>Mac上搭建基于GitHub的Hexo博客<a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="external">http://www.jianshu.com/p/13e64c9e2295</a></p>
<p>在 iPic 中添加七牛云<a href="http://i.toolinbox.net/iPic/AddQiniuImageHost.html" target="_blank" rel="external">http://i.toolinbox.net/iPic/AddQiniuImageHost.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h1&gt;&lt;p&gt;相对来说
    
    </summary>
    
      <category term="Blog" scheme="http://misterzhai.win/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://misterzhai.win/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll的搭建和Github的部署</title>
    <link href="http://misterzhai.win/2016/10/16/jekyllBlog/"/>
    <id>http://misterzhai.win/2016/10/16/jekyllBlog/</id>
    <published>2016-10-16T12:46:20.000Z</published>
    <updated>2016-10-16T12:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Jekyll的搭建和Github的部署"><a href="#Jekyll的搭建和Github的部署" class="headerlink" title="Jekyll的搭建和Github的部署"></a>Jekyll的搭建和Github的部署</h1><p>先把曾将搭建的JekyllBlog过程发上来吧，虽然弄好之后并没有一直写。</p>
<h2 id="使用gem安装Jekyll"><a href="#使用gem安装Jekyll" class="headerlink" title="使用gem安装Jekyll"></a>使用gem安装Jekyll</h2><pre><code>gem install jekyll
</code></pre><p>Ruby自带的有gem所以可以直接用gem安装，但是在国内官方的源是没办法用的，会报如下错误：</p>
<pre><code>ERROR:  Could not find a valid gem &apos;jekyll&apos; (&gt;= 0), here is why:
      Unable to download data from https://rubygems.org/ - Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/latest_specs.4.8.gz)
</code></pre><p>所以就需要更换为国内的镜像，一般使用淘宝的<a href="https://ruby.taobao.org" target="_blank" rel="external">RubyGems</a>镜像,具体设置见文档。</p>
<pre><code>ERROR:  While executing gem ... (Gem::FilePermissionError)
You don&apos;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
</code></pre><p>把权限修改过来</p>
<pre><code>sudo chmod 777 /Library/Ruby/Gems/2.0.0
</code></pre><p>在安装的过程中一直提示错误，于是又反过去，发现在更换淘宝源的时候，有一条命令没有输入执行，忽略了，于是又开始执行</p>
<pre><code>gem install rails
</code></pre><p>提示出错，又是搜索，解决步骤</p>
<ul>
<li>sudo gem update –system</li>
<li>xcode-select –install   会提示安装命令行工具，点击安装</li>
<li>sudo gem install compass</li>
<li>sudo gem install rails 执行中会提示是否重新覆盖<strong>Overwrite the executable? [yN]</strong>输入y</li>
</ul>
<p>然后还是卡在</p>
<pre><code>Fetching: listen-3.0.6.gem (100%)
ERROR:  While executing gem ... (Errno::EACCES)
Permission denied - /Library/Ruby/Gems/2.0.0/cache/listen-3.0.6.gem
</code></pre><p>然后切换VPN用Google开始搜，并没有卵用ORZ~~然后用sudo又试了一下居然success</p>
<pre><code>sudo gem install jekyll
</code></pre><p>如果要卸载<code>gem uninstall jekyll</code></p>
<h2 id="创建博客站点"><a href="#创建博客站点" class="headerlink" title="创建博客站点"></a>创建博客站点</h2><p>先cd 到桌面 在桌面目录下</p>
<pre><code>jekyll new blog 
</code></pre><p>会在桌面上创建出一个文件夹<code>执行help命令查看更多</code></p>
<h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><pre><code>cd blog         #进入blog目录,记得一定要进入创建的目录，否则服务无法开启
jekyll serve      #启动你的http服务 
</code></pre><p>本地服务开启 默认开启端口4000 输入<a href="http://localhost:4000或者http://127.0.0.1:4000/即可访问" target="_blank" rel="external">http://localhost:4000或者http://127.0.0.1:4000/即可访问</a></p>
<p>目录结构如下：</p>
<pre><code>├ about.md
├ _config.yml
├ css
│   └ main.scss
├ feed.xml
├ _includes
│   ├ footer.html
│   ├ header.html
│   ├ head.html
│   ├ icon-github.html
│   ├ icon-github.svg
│   ├ icon-twitter.html
│   └ icon-twitter.svg
├ index.html
├ _layouts
│   ├ default.html
│   ├ page.html
│   └ post.html
├ _posts
│   └ 2016-03-04-welcome-to-jekyll.markdown
└ _sass

    ├ _layout.scss
    └ _syntax-highlighting.scss
</code></pre><p>markdown语法的文章放在这个目录</p>
<p>下面必须遵循<code>YYYY-MM-DD-name-of-post.ext</code>这样的命名</p>
<p>还需要<code>jekyll build</code>命令去生成</p>
<p>默认情况下，服务以前台的方式挂起，如果希望用后台进程运行服务，可以使用 –detach参数缩写参数-B</p>
<pre><code>jekyll serve build --detach 
或者
jekyll serve build -B
</code></pre><p>打开文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">layout: post</div><div class="line">title:  &quot;Welcome to Jekyll!&quot;</div><div class="line">date:   2016-03-04 10:52:19 +0100</div><div class="line">categories: jekyll update</div></pre></td></tr></table></figure>
<p>layout表示使用的是post布局，title是文章标题，date是自动生成的日期，categories是该文章生成html文件后存放的目录，可以去_site/jekyll/update下找到对应日期下面的html文档。当然你也可以只设置jekyll单一的目录，甚至是更多级别的目录，用空格分开即可。头信息设置完成后就可以书写正文了。</p>
<p>如果每次都输入这些头信息，还要去整理格式，那么一定很烦躁，这种重复性的东西我们就把它自动化，通过Rakefile去解决，它类似shell这样的脚本，可以使用交互模式。以下是我的Rakefile,可以复制后命名为Rakefile，放在站点根目录直接使用，也可以修改为适合自己的Rakefile：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">task :default =&gt; :new</div><div class="line"></div><div class="line">require &apos;fileutils&apos;</div><div class="line"></div><div class="line">desc &quot;创建新 post&quot;</div><div class="line">task :new do</div><div class="line">  puts &quot;请输入要创建的 post URL：&quot;</div><div class="line">	@url = STDIN.gets.chomp</div><div class="line">	puts &quot;请输入 post 标题：&quot;</div><div class="line">	@name = STDIN.gets.chomp</div><div class="line">	puts &quot;请输入 post 子标题：&quot;</div><div class="line">	@subtitle = STDIN.gets.chomp</div><div class="line">	puts &quot;请输入 post 分类，以空格分隔：&quot;</div><div class="line">	@categories = STDIN.gets.chomp</div><div class="line">	puts &quot;请输入 post 标签：&quot;</div><div class="line">	@tag = STDIN.gets.chomp</div><div class="line">	@slug = &quot;#&#123;@url&#125;&quot;</div><div class="line">	@slug = @slug.downcase.strip.gsub(&apos; &apos;, &apos;-&apos;)</div><div class="line">	@date = Time.now.strftime(&quot;%F&quot;)</div><div class="line">	@post_name = &quot;_posts/#&#123;@date&#125;-#&#123;@slug&#125;.md&quot;</div><div class="line">	if File.exist?(@post_name)</div><div class="line">			abort(&quot;文件名已经存在！创建失败&quot;)</div><div class="line">	end</div><div class="line">	FileUtils.touch(@post_name)</div><div class="line">	open(@post_name, &apos;a&apos;) do |file|</div><div class="line">			file.puts &quot;---&quot;</div><div class="line">			file.puts &quot;layout: post&quot;</div><div class="line">			file.puts &quot;title: #&#123;@name&#125;&quot;</div><div class="line">			file.puts &quot;subtitle: #&#123;@subtitle&#125;&quot;</div><div class="line">			file.puts &quot;author: MisterZhai&quot;</div><div class="line">			file.puts &quot;date: #&#123;Time.now&#125;&quot;</div><div class="line">			file.puts &quot;categories: #&#123;@categories&#125;&quot;</div><div class="line">			file.puts &quot;tag: #&#123;@tag&#125;&quot;</div><div class="line">			file.puts &quot;---&quot;</div><div class="line">	end</div><div class="line">	exec &quot;vi #&#123;@post_name&#125;&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>使用Rake，输入一下命令</p>
<pre><code>rake new
</code></pre><p>rake会启动交互模式，让你依次输入title，subtitle，author，categories，tag等信息，并为你创建好具有头信息的markdown文件<br>我们查看_post目录，发现已经有一篇2016-03-05-testurl.md文章</p>
<p>###创建Github pages</p>
<p>相对来说这一步就相对简单的多了</p>
<ul>
<li>创建仓库，选择setting</li>
<li>点击<strong>Launch automatic page generator</strong></li>
<li>编辑下标题和描述，任意选择一个模板，点击Publish</li>
<li>最后要注意的是<strong>要在github中建立一个基于你的用户名的repository</strong>建立名为username.github.io的repo,否则URL后面会出现仓库的名字username.github.io/xxxx/</li>
</ul>
<h2 id="将本地jekyll部署到Github仓库"><a href="#将本地jekyll部署到Github仓库" class="headerlink" title="将本地jekyll部署到Github仓库"></a>将本地jekyll部署到Github仓库</h2><p>cd到要保存代码的文件夹，克隆到本地</p>
<pre><code>git clone https://github.com/username/username.github.com.git
</code></pre><p>启动jekyll服务（启动前确保其他目录下没有jekyll服务，可以ps aux|grep jekyll查看进程,有的话,用kill -9 进程号杀掉</p>
<p>拷贝本地blog(这个是前面本地搭建的blog，后续等同，不再说明)下的所有目录及文件到仓库</p>
<pre><code>cp -r blog/* username.github.io
</code></pre><p>上传到线上环境</p>
<pre><code>git add --all               #添加到暂存区    
git commit -m &quot;提交jekyll默认页面&quot; #提交到本地仓库
git push origin master           #线上的站点是部署在master下面的
</code></pre><p>可以通过<a href="http://username.github.io/访问你的站点" target="_blank" rel="external">http://username.github.io/访问你的站点</a></p>
<h2 id="绑定个性域名"><a href="#绑定个性域名" class="headerlink" title="绑定个性域名"></a>绑定个性域名</h2><p>下增加一个CNAME文件。 在里面添加你的域名，假设为example.com，然后推送CNAME文件到远程仓库</p>
<pre><code>git add CNAME
git push origin master
</code></pre><p>到域名服务商增加你的CNAME记录。 添加两条记录，@和www的主机记录，记录类型为CNAME类型，CNAME表示别名记录，该记录可以将多个名字映射到同一台计算机。 记录值请写username.github.io.,值得注意的是io后面还有一个圆点，切记，过个几分钟，刷新博客即可访问</p>
<h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><p>1.通过jekyll serve -B启动服务，使用Rakefile创建文章，然后用自己喜欢的工具进行写作。</p>
<p>2.完成后，通过jekyll build生成页面，本地localhost:4000查看文章</p>
<h2 id="发布到线上"><a href="#发布到线上" class="headerlink" title="发布到线上"></a>发布到线上</h2><p>1.可以通过git add,git commit,git push等git命令推送文章到Github Pages服务器</p>
<p>2.通过绑定的域名，查看线上文章.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://pizida.com/technology/2016/03/03/use-jekyll-create-blog-on-github/#jekyll" target="_blank" rel="external">Jekyll本地搭建开发环境以及Github部署流程</a></p>
<p><a href="http://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="external">利用github-pages建立个人博客</a></p>
<p><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">MarkDown语法</a></p>
<p><a href="http://jekyllrb.com/docs/home/" target="_blank" rel="external">Jekyll官网</a></p>
<p><a href="http://jekyllcn.com/docs/home/" target="_blank" rel="external">Jekyll中文镜像网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Jekyll的搭建和Github的部署&quot;&gt;&lt;a href=&quot;#Jekyll的搭建和Github的部署&quot; class=&quot;headerlink&quot; title=&quot;Jeky
    
    </summary>
    
      <category term="Blog" scheme="http://misterzhai.win/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://misterzhai.win/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>joke</title>
    <link href="http://misterzhai.win/2016/10/16/joke/"/>
    <id>http://misterzhai.win/2016/10/16/joke/</id>
    <published>2016-10-16T12:25:43.000Z</published>
    <updated>2016-10-16T12:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>额日期需要<code>rq</code>才能在搜狗上出现，直接打是出不来的！</p>
<h1 id="2016年10月16日"><a href="#2016年10月16日" class="headerlink" title="2016年10月16日"></a>2016年10月16日</h1><blockquote>
<p>森林中，大象正在注射冰毒。<br>小白兔蹦蹦跳跳地跑过来对他说：＂世界这么美丽，你为什么要在这里吸毒呢？跟我一起去探索大自然吧！＂大象觉得有理，跟小白兔跑了。<br>他们看见长颈鹿正在注射海洛因。小白兔对他说：”世界这么美丽，你为什么要在这里吸毒呢？跟我一起去探索大自然吧！”长颈鹿觉得有理，跟他们俩跑了。<br>他们三个跑着跑着看到狮子在吸大麻。小白兔对他说：”世界这么美丽，你为什么要在这里吸毒呢？跟我一起去探索大自然吧！”<br>狮子愣了一下，把小白兔揍了一顿。<br>长颈鹿和大象不解，问为什么要打他。<br>狮子气愤地说：”他妈的，这混蛋兔子，每次一嗑摇头丸就拉着我满森林乱跑！”</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;额日期需要&lt;code&gt;rq&lt;/code&gt;才能在搜狗上出现，直接打是出不来的！&lt;/p&gt;
&lt;h1 id=&quot;2016年10月16日&quot;&gt;&lt;a href=&quot;#2016年10月16日&quot; 
    
    </summary>
    
      <category term="笑话" scheme="http://misterzhai.win/categories/%E7%AC%91%E8%AF%9D/"/>
    
    
      <category term="笑话" scheme="http://misterzhai.win/tags/%E7%AC%91%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hello-World</title>
    <link href="http://misterzhai.win/2016/10/16/Hello-World/"/>
    <id>http://misterzhai.win/2016/10/16/Hello-World/</id>
    <published>2016-10-16T11:15:20.000Z</published>
    <updated>2016-10-16T12:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="2016年开篇"><a href="#2016年开篇" class="headerlink" title="2016年开篇"></a>2016年开篇</h2><p>Blog终于搭好了，音乐也有了,从决定要再次搭建博客的那天13号晚上直接就买了这个域名，一买就是10年，希望接下来能够坚持下去。上次还是2014年，看着网站上过去那个域名的购买记录，感觉所有事情总是才刚刚发生一样。</p>
<p>我也很喜欢这个win域名的后缀，最重要的一点是便宜…哈哈哈哈哈哈。</p>
<p>时间过的真快，上一年这个时候的自己还在迷茫。Mac也用了快一年了，MarkDown不说熟练吧，也差不多会用了，以后除非必要，不会在这上面放太多图片的。一是插图不方便，虽说七牛的云存储也搭好了，但是自己总是感觉没有本地备份一份安全；二是可能受了苹果的影响吧感觉某些东西，事情一定要简洁，专注于内容本身。</p>
<p>有很多自己的想法，也一直以来没有找到一个合适的平台，总是在犹豫，想改变自己的性格。人总是要在开始的时候立一下flag。</p>
<p>今天是周末晚上，来到了办公室写下了这一篇很早就想动笔的文章。</p>
<p>其实当夜深人静的时候，和键盘声还是挺配的。</p>
<p>不喜欢热闹，社交恐惧症，不善表达，所有的东西归结到一起，所以造就了我这条单身狗🐶吧。</p>
<p>一直想追求过简单的生活。</p>
<blockquote>
<p>两周写一篇技术博客</p>
</blockquote>
<p>其实算算一年也就52周。</p>
<blockquote>
<p>准备写一篇笑话</p>
</blockquote>
<p>自己一个人的时候，要懂得开心，没事的时候自己乐一下😊</p>
<blockquote>
<p>肌肉啊💪，锻炼身体</p>
</blockquote>
<p>八块腹肌，憋跑等等我…</p>
<p>删删写写，就这样吧，谢谢X，唱吧一直没删，总是在夜里打开默默听着。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;2016年开篇&quot;&gt;&lt;a href=&quot;#2016年开篇&quot; class=&quot;headerlink&quot; title=&quot;2016年开篇&quot;&gt;&lt;/a&gt;2016年开篇&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://misterzhai.win/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://misterzhai.win/tags/Blog/"/>
    
  </entry>
  
</feed>
